import           Control.Monad
import           Data.Text                      ( Text )
import qualified Data.Text                     as T
import           Language.WebIDL.AST
import           Language.WebIDL.Parser         ( pFragment )
import           Test.Hspec
import           Test.Hspec.Megaparsec
import           Text.Megaparsec                ( parse, ParseErrorBundle, SourcePos )
import           Data.Void                      ( Void )

fixturePath :: String -> String -> String
fixturePath path name = path <> "/" <> name <> ".webidl"

baselinePath :: String -> String
baselinePath = fixturePath "test/baselines"

invalidFixturePath :: String -> String
invalidFixturePath = fixturePath "test/invalid"

runInvalid :: String -> Spec
runInvalid name = it name $ parseFixture path >>= (parse pFragment path `shouldFailOn`)
  where path = invalidFixturePath name

runBaseline :: String -> Spec
runBaseline name = it name $ parseFixture path >>= (parse pFragment path `shouldSucceedOn`)
  where path = baselinePath name

parseFixture :: String -> IO Text
parseFixture path = T.pack <$> readFile path

skip :: String -> Spec -> Spec
skip message = before (pendingWith message)

main :: IO ()
main = hspec $ do
  describe "Integration tests" $ do
    runBaseline "Lexing"
    runBaseline "Simple"
    runBaseline "Example10"
    runBaseline "Example39"
    runBaseline "Example12"
    runBaseline "Example8"
    runBaseline "ExtendedAttributes"
    runBaseline "DOM"
    runBaseline "HTMLDOM"
    runBaseline "Regression1"
    runBaseline "Regression2"
    runBaseline "PartialInterfaceMixin"
    runBaseline "Types"

  describe "Conformance tests" $ do
    runBaseline "allowany"
    runBaseline "argument-constructor"
    runBaseline "argument-extattrs"
    runBaseline "async-iterable"
    runBaseline "async-name"
    runBaseline "callback"
    runBaseline "constants"
    runBaseline "constructor"
    runBaseline "default"
    runBaseline "dictionary-inherits"
    runBaseline "dictionary"
    skip "TODO" $ runBaseline "documentation-dos"
    runBaseline "documentation"
    runBaseline "enum"
    runBaseline "equivalent-decl"
    runBaseline "escaped-name"
    runBaseline "escaped-type"
    runBaseline "extended-attributes"
    runBaseline "generic"
    runBaseline "getter-setter"
    runBaseline "identifier-hyphen"
    runBaseline "identifier-qualified-names"
    runBaseline "includes-name"
    runBaseline "indexed-properties"
    runBaseline "inherits-getter"
    runBaseline "interface-inherits"
    runBaseline "iterable"
    runBaseline "maplike"
    runBaseline "mixin"
    runBaseline "namedconstructor"
    runBaseline "namespace"
    runBaseline "nointerfaceobject"
    runBaseline "nullable"
    runBaseline "nullableobjects"
    runBaseline "obsolete-keywords"
    runBaseline "operation-optional-arg"
    runBaseline "overloading"
    runBaseline "overridebuiltins"
    runBaseline "partial-interface"
    runBaseline "primitives"
    runBaseline "promise-void"
    runBaseline "prototyperoot"
    runBaseline "putforwards"
    runBaseline "record"
    skip "Not compliant with current spec" $ runBaseline "reflector-interface"
    runBaseline "reg-operations"
    runBaseline "replaceable"
    runBaseline "sequence"
    runBaseline "setlike"
    runBaseline "static"
    runBaseline "stringifier-attribute"
    runBaseline "stringifier"
    runBaseline "treatasnull"
    runBaseline "treatasundefined"
    runBaseline "typedef-union"
    runBaseline "typedef"
    runBaseline "typesuffixes"
    runBaseline "uniontype"
    runBaseline "variadic-operations"
    runBaseline "interface-mixin"
    runBaseline "getter-return-type"
    runBaseline "nested-sequence-and-union"
    runBaseline "url.whatwg"

  describe "Invalid" $ do
    runInvalid "any-keyword"
    skip "Requires semantic analysis" $ runInvalid "argument-dict-default"
    skip "Requires semantic analysis" $ runInvalid "argument-dict-nullable"
    skip "Requires semantic analysis" $ runInvalid "argument-dict-optional"
    runInvalid "array"
    runInvalid "async-iterable-readonly"
    runInvalid "async-iterable-single"
    runInvalid "async-maplike"
    runInvalid "callback-attribute"
    runInvalid "callback-noassign"
    runInvalid "callback-noparen"
    runInvalid "callback-noreturn"
    runInvalid "callback-semicolon"
    runInvalid "caller"
    runInvalid "const-nullable"
    runInvalid "const-null"
    skip "Requires semantic analysis" $ runInvalid "constructible-global"
    skip "Escaped 'constructor' name should be allowed?" $ runInvalid "constructor-escaped"
    skip "What's invalid in this?" $ runInvalid "constructor"
    runInvalid "dict-field-unterminated"
    runInvalid "dict-no-default"
    runInvalid "dict-required-default"
    skip "Requires semantic analysis" $ runInvalid "duplicate-escaped"
    skip "Requires semantic analysis" $ runInvalid "duplicate"
    runInvalid "enum-bodyless"
    runInvalid "enum-empty"
    runInvalid "enum"
    runInvalid "enum-wo-comma"
    runInvalid "exception"
    skip "Requires semantic analysis" $ runInvalid "exposed"
    runInvalid "extattr-double-field"
    runInvalid "extattr-double"
    runInvalid "extattr-empty-ids"
    runInvalid "float"
    runInvalid "frozenarray-empty"
    runInvalid "id-underscored-number"
    runInvalid "implements_and_includes_ws"
    runInvalid "implements"
    runInvalid "inheritance-typeless"
    runInvalid "inherit-readonly"
    runInvalid "int32array-keyword"
    runInvalid "iterable-empty"
    runInvalid "iterable-notype"
    runInvalid "iterator"
    runInvalid "legacyiterable"
    runInvalid "maplike-1type"
    runInvalid "module"
    skip "TODO" $ runInvalid "namespace-readwrite"
    runInvalid "nonempty-sequence"
    runInvalid "nonnullableany"
    runInvalid "nonnullableobjects"
    runInvalid "no-semicolon-callback"
    runInvalid "no-semicolon-operation"
    runInvalid "no-semicolon"
    runInvalid "nullable-union-dictionary"
    runInvalid "operation-nameless"
    runInvalid "operation-too-special"
    runInvalid "overloads"
    runInvalid "promise-empty"
    runInvalid "promise-nullable"
    runInvalid "promise-with-extended-attribute"
    runInvalid "raises"
    runInvalid "readonly-iterable"
    runInvalid "record-key"
    runInvalid "record-key-with-extended-attribute"
    runInvalid "record-single"
    skip "Valid grammar" $ runInvalid "recursive-type"
    runInvalid "scopedname"
    skip "Valid grammar" $ runInvalid "sequenceAsAttribute"
    runInvalid "sequence-empty"
    runInvalid "setlike-2types"
    runInvalid "setter-creator"
    runInvalid "spaced-negative-infinity"
    runInvalid "spaced-variadic"
    runInvalid "special-omittable"
    runInvalid "stray-slash"
    runInvalid "stringconstants"
    skip "Valid grammar" $ runInvalid "tostring-escaped"
    skip "Valid grammar" $ runInvalid "tostring"
    runInvalid "typedef-nested"
    runInvalid "union-any"
    runInvalid "union-dangling-or"
    runInvalid "union-one"
    runInvalid "union-promise"
    runInvalid "union-zero"
    runInvalid "unknown-generic" 
